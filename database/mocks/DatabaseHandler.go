// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import database "github.com/karlderkaefer/databasecontroler/database"
import sqlx "github.com/jmoiron/sqlx"

// DatabaseHandler is an autogenerated mock type for the DatabaseHandler type
type DatabaseHandler struct {
	mock.Mock
}

// Config provides a mock function with given fields:
func (_m DatabaseHandler) Config() database.Configuration {
	ret := _m.Called()

	var r0 database.Configuration
	if rf, ok := ret.Get(0).(func() database.Configuration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(database.Configuration)
	}

	return r0
}

// Connect provides a mock function with given fields:
func (_m DatabaseHandler) Connect() (*sqlx.DB, database.Message, error) {
	ret := _m.Called()

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	var r1 database.Message
	if rf, ok := ret.Get(1).(func() database.Message); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(database.Message)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ConnectionUrl provides a mock function with given fields:
func (_m DatabaseHandler) ConnectionUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Execute provides a mock function with given fields: command
func (_m DatabaseHandler) Execute(command string) (database.Message, error) {
	ret := _m.Called(command)

	var r0 database.Message
	if rf, ok := ret.Get(0).(func(string) database.Message); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Get(0).(database.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
