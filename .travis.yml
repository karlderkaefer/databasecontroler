sudo: true

services:
  - docker

language: go

# You don't need to test on very old version of the Go compiler. It's the user's
# responsibility to keep their compilers up to date.
go:
  - 1.13.x

cache:
  directories:
    - $GOPATH/pkg/mod

env:
  - GO111MODULE=on

# Skip the install step. Don't `go get` dependencies. Only build with the code
# in vendor/
install: true

# Don't email me the results of the test runs.
notifications:
  email: false

# Anything in before_script that returns a nonzero exit code will flunk the
# build and immediately stop. It's sorta like having set -e enabled in bash.
# Make sure golangci-lint is vendored.
before_script:
  - curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.23.1
  - sudo /etc/init.d/mysql stop
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - chmod +x scripts/db2/init.sh
#  - docker run -d --rm --name mysql -p 3306:3306 -e MYSQL_DATABASE=seed -e MYSQL_ROOT_PASSWORD=HelloApes66 mysql:5.7
#  - docker run -d --rm --name sqlserver -e MSSQL_PID=Express -e ACCEPT_EULA=y -e SA_PASSWORD=HelloApes66 -p 1433:1433 microsoft/mssql-server-linux
#  - docker run -d --rm --name oracle11 --shm-size=1g -e ORACLE_PWD=HelloApes66 -e LD_LIBRARY_PATH='$ORACLE_HOME/lib:/lib:/usr/lib;' -p 1521:1521 karlderkaefer/private:oracle11-11.2.0.2-xe
  - docker run -d --rm --name databasemanager_db2_1 --privileged -e LICENSE=accept -e DB2INST1_PASSWORD=HelloApes66 -e DBNAME=sample -e TEXT_SEARCH="false" -e ARCHIVE_LOGS="false" --health-cmd='nc -vz localhost 50000' -v $(pwd)/scripts/db2/init.sh:/var/custom/init.sh --health-start-period=30s -p 50000:50000 ibmcom/db2:11.5.0.0
  - WAIT_TIME=0
  - while [[ "$(docker inspect -f {{.State.Health.Status}} databasemanager_db2_1)" != "healthy" && "$WAIT_TIMEOUT" -lt 60 ]]; do sleep 5; ((WAIT_TIMEOUT++));echo waiting for databasemanager_db2_1 to be healthy; done;
  - docker logs databasemanager_db2_1
  - echo 'function db2() { docker exec databasemanager_db2_1 su - db2inst1 -c "~/sqllib/bin/db2 $*" ;}' >> ~/.bash_aliases
  - source ~/.bash_aliases
  - docker exec databasemanager_db2_1 su - db2inst1 -c "pwd"
  - docker exec databasemanager_db2_1 su - db2inst1 -c "ls -al /home && ls -al ~"
  - docker exec databasemanager_db2_1 su - db2inst1 -c "~/sqllib/bin/db2 list database directory"
  - docker exec databasemanager_db2_1 su - db2inst1 -c "~/sqllib/bin/db2 get dbm cfg" | grep MEMORY
  - db2 get dbm cfg | grep MEMORY
  - db2 list database directory
  # oracle client driver
#  - docker run -d --rm --name client karlderkaefer/private:oracleclient12
#  - docker cp client:/opt/oracle /opt/
#  - export ORACLE_CLIENT=/opt/oracle/instantclient_12_2
#  - export LD_LIBRARY_PATH=/opt/oracle/instantclient_12_2:$LD_LIBRARY_PATH
#  - ln -s $ORACLE_CLIENT/libclntsh.so.12.1 libclntsh.so
#  - ln -s $ORACLE_CLIENT/libocci.so.12.1 libocci.so.12.1
#  - WAIT_TIME=0
#  - while [[ "$(docker inspect -f {{.State.Health.Status}} oracle11)" != "healthy" && "$WAIT_TIMEOUT" -lt 60 ]]; do sleep 5; ((WAIT_TIMEOUT++));echo waiting for oracle11 to be healthy; done;

  - docker logs databasemanager_db2_1
#  - docker logs oracle11
  # make oracle db available from other hosts
#  - docker exec oracle11 sed -i -E "s/(HOST = )(.*)(\)\(.*)/\10.0.0.0\3/" /u01/app/oracle/product/11.2.0/xe/network/admin/tnsnames.ora
#  - docker exec oracle11 cat /u01/app/oracle/product/11.2.0/xe/network/admin/tnsnames.ora
  - docker stats --no-stream

# script always runs to completion (set +e). If we have linter issues AND a
# failing test, we want to see both. Configure golangci-lint with a
# .golangci.yml file at the top level of your repo.
script:
  # Run all the tests with the race detector enabled
  # use short test mode to exclude oracle tests
  - go test -v -race -short -coverprofile=coverage.txt -covermode=atomic ./...
  # run a bunch of code checkers/linters in parallel
  - golangci-lint run

after_success:
  - bash <(curl -s https://codecov.io/bash)